# based on rules_python/examples/pip_parse/WORKSPACE

workspace(name = "demo_rules_python")

# if copy-pasting, use this instead:
#
# load("@bazel_tools//tools/build_defs/repo:http.bzl", "http_archive")
# http_archive(
#     name = "rules_ai",
#     sha256 = "...",
#     strip_prefix = "rules_ai-x.y.z",
#     url = "https://github.com/chickenandpork/rules_ai/releases/download/x.y.z/rules_ai-x.y.z.tar.gz",
# )
local_repository(
    name = "rules_ai",
    path = "../..",
)

load("@rules_ai//:deps.bzl", rules_ai_dependencies = "dependencies")

rules_ai_dependencies()

load("@rules_ai//:python_defs.bzl", rules_ai_py_toolchain = "py_toolchain")

rules_ai_py_toolchain(python_version = "3.9", python_repo_name = "python39")

# demo_vendored_requirements shows how to use a pre-curated set of requirements already expanded to
# a lock file, reducing parse/resolution at the individual repo level.  Keeping the ability to
# custom-define a pip_parse(), this version is closer to a basic rules_python usage, including a
# call to pip_parse() before the install_deps() call.

load("@python39//:defs.bzl", "interpreter")
load("@rules_python//python:pip.bzl", "pip_parse")

pip_parse(
    name = "pypi",
    #environment = {"HTTPS_PROXY": "http://10.0.0.9:3128/"},
    python_interpreter_target = interpreter,
    requirements_lock = "//:requirements_lock.txt",
)

load("@pypi//:requirements.bzl", "install_deps")

install_deps()
